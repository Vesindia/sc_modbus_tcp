-------------------------------------------------------------------------------
-- Descriptive metadata
-------------------------------------------------------------------------------

componentName = "Modbus TCP"
componentFullName = ""
alternativeNames = {}
componentDescription = "Offers a Modbus TCP component"
componentVersion = "1v0"

-------------------------------------------------------------------------------
-- Parameter descriptions.
-------------------------------------------------------------------------------

configPoints = {}
derivedValues = {}


ports = {
   p_eth_rxclk = {
      short   = "MII RX Clock",
      long    = "Clock signal for MII RX",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1A",
      enabled = not swblock.params.separate_mac
   },
   p_eth_txclk = {
      short   = "MII TX Clock",
      long    = "Clock signal for MII TX",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1C",
      enabled = not swblock.params.separate_mac
   },
   p_eth_rxer = {
      short   = "MII RX Error",
      long    = "Error signal for MII RX",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1B",
      enabled = not swblock.params.separate_mac
   },
   p_eth_txd = {
      short   = "MII TX Data",
      long    = "Data line for transmit (mac to phy)",
      help    = "",
      width   = 4,
      value   = "XS1_PORT_4D",
      enabled = not swblock.params.separate_mac
   },
   p_eth_rxd = {
      short   = "MII RX Data",
      long    = "Data line for receive (phy to mac)",
      help    = "",
      width   = 4,
      value   = "XS1_PORT_4C",
      enabled = not swblock.params.separate_mac
   },
   p_eth_rstn = {
      short   = "MII Reset",
      long    = "MII Reset",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1H",
      enabled = not swblock.params.separate_mac and swblock.params.use_reset
   },
   p_eth_txen = {
      short   = "MII TX enable",
      long    = "Enable line for MII TX",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1E",
      enabled = not swblock.params.separate_mac
   },
   p_eth_rxdv = {
      short   = "MII RX Data Valid",
      long    = "Valid line for MII RX",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1D",
      enabled = not swblock.params.separate_mac
   },
   p_eth_fake = {
      short   = "MII fake port",
      long    = "MII lite fake port",
      help    = "This port does not connect to any outside stimulus (hence is a 'fake'). However it is used internally by the implementation.",
      width   = 8,
      value   = "XS1_PORT_8A",
      enabled = not swblock.params.separate_mac
   },
   p_eth_mdc = {
      short   = "SMI MDC",
      long    = "MDC clock signal for SMI phy configuration interface",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1I",
      enabled = not swblock.params.separate_mac and not swblock.params.combine_smi_ports
   },
   p_eth_mdio = {
      short   = "SMI MDIO",
      long    = "MDIO I/O signal for SMI phy configuration interface",
      help    = "",
      width   = 1,
      value   = "XS1_PORT_1G",
      enabled = not swblock.params.separate_mac and not swblock.params.combine_smi_ports
   },
   p_eth_mdc_mdio = {
      short   = "SMI Combined MDC/MDIO",
      long    = "Combined MDC/MDIO signal for SMI phy configuration",
      help    = "This port combines the MDC/MDIO signals with the MDC signal being the top bit of the 4-bit port",
      width   = 4,
      value   = "XS1_PORT_4C",
      enabled = not swblock.params.separate_mac and swblock.params.combine_smi_ports,
   }
}


channels = {
   c_modbus = {
      short = "Modbus TCP server channel",
      long = "Channels between Modbus TCP server and application",
      help = "",
   }
}


function getConfigStatus()
   local status = "Trusted Configuration"
   local issues = {}
   return status, issues
end

-------------------------------------------------------------------------------
-- Source generation functions
-------------------------------------------------------------------------------

generatedCode = {
   includes = {"modbus_tcp.h"},

   globals = [[
      ethernet_xtcp_ports_t xtcp_ports = {
         OTP_PORTS_INITIALIZER,
         // SMI ports
         {${swblock.params.phy_id},
         ${swblock.ports.p_eth_mdio},
         ${swblock.ports.p_eth_mdc}},
         // MII ports
         {${swblock.clocks[0]},
         ${swblock.clocks[1]},
         ${swblock.ports.p_eth_rxclk},
         ${swblock.ports.p_eth_rxer},
         ${swblock.ports.p_eth_rxd},
         ${swblock.ports.p_eth_rxdv},
         ${swblock.ports.p_eth_txclk},
         ${swblock.ports.p_eth_txen},
         ${swblock.ports.p_eth_txd},
         ${swblock.ports.p_eth_fake}}
      };

      xtcp_ipconfig_t ipconfig = {
         { 0, 0, 0, 0 }, // ip address (eg 192,168,0,2)
         { 0, 0, 0, 0 }, // netmask (eg 255,255,255,0)
         { 0, 0, 0, 0 }  // gateway (eg 192,168,0,1)
      };
    
      static void application(chanend ${swblock.chanends.c_modbus})
      {
         while(1)
         {
            select
            {
               case ${swblock.chanends.c_modbus} :> unsigned char cmd:
               {
                  unsigned short address, value;
                  unsigned short rtnval = 0;

                  c_modbus :> address;
                  c_modbus :> value;

                  switch(cmd)
                  {
                     case MODBUS_READ_COIL:
                     case MODBUS_READ_DISCRETE_INPUT:
                     case MODBUS_READ_HOLDING_REGISTER:
                     case MODBUS_READ_INPUT_REGISTER:
                     case MODBUS_WRITE_SINGLE_REGISTER:
                     {
                        c_modbus <: rtnval;
                        break;
                     }

                     default: break;
                  }
                  break;
               }
            }
         }
      }
   ]],

   body = [[

      modbus_tcp_server(${swblock.chanends.c_modbus}, xtcp_ports, ipconfig);
      application(${swblock.chanends.c_modbus});
    
   ]]
}

api = {
   'modbus_tcp_server',
}

files = {
   ["module_modbus_tcp/modbus_conf_example.h"] = "src/modbus_conf.h",
}

