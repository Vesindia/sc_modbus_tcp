/*------------------------------------------------------------------------------
 Include files
 ------------------------------------------------------------------------------*/
#include <platform.h>
#include "xmodbus.h"
#include "uip_server.h"
#include "getmac.h"
#include "ethernet_server.h"

/*------------------------------------------------------------------------------
 Ports and Clocks
 ------------------------------------------------------------------------------*/
on stdcore[2]: port otp_data = XS1_PORT_32B; // OTP_DATA_PORT
on stdcore[2]: out port otp_addr = XS1_PORT_16C; // OTP_ADDR_PORT
on stdcore[2]: port otp_ctrl = XS1_PORT_16D; // OTP_CTRL_PORT
on stdcore[2]: clock clk_smi = XS1_CLKBLK_5;
on stdcore[2]: mii_interface_t mii =
{
   XS1_CLKBLK_1,
   XS1_CLKBLK_2,

   PORT_ETH_RXCLK,
   PORT_ETH_RXER,
   PORT_ETH_RXD,
   PORT_ETH_RXDV,

   PORT_ETH_TXCLK,
   PORT_ETH_TXEN,
   PORT_ETH_TXD,
};

#ifdef PORT_ETH_RST_N
   on stdcore[2]: out port p_mii_resetn = PORT_ETH_RST_N;
   on stdcore[2]: smi_interface_t smi = {PORT_ETH_MDIO, PORT_ETH_MDC, 0};
#else
   on stdcore[2]: smi_interface_t smi = {PORT_ETH_RST_N_MDIO, PORT_ETH_MDC, 1 };
#endif

/*------------------------------------------------------------------------------
 Manifest constants
 ------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
 Typedefs
 ------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
 Global Variables
 ------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
 Static Variables
 ------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
 Prototypes
 ------------------------------------------------------------------------------*/
static void application(chanend c_user);

/*------------------------------------------------------------------------------
 Implementation
 ------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
 Name:
 Purpose:
 Input:
 Output:
 Notes:
 ------------------------------------------------------------------------------*/

int main(void)
{
   chan c_user;
   chan mac_rx[1], mac_tx[1], xtcp[1], connect_status;

   par
   {
      // The ethernet server
      on stdcore[2]:
      xmodbus_ethernet(mac_rx[0], mac_tx[0], connect_status);

      // The TCP/IP server thread
      on stdcore[3]:
      xmodbus_tcpip(mac_rx[0], mac_tx[0], connect_status, xtcp[0]);

      // Modbus thread
      on stdcore[0]:
      xmodbus(c_user, xtcp[0]);
      on stdcore[0]:
      application(c_user);
   }
   return 0;
}

/*------------------------------------------------------------------------------
 Name:
 Purpose:
 Input:
 Output:
 Notes:
 ------------------------------------------------------------------------------*/
static void application(chanend c_user)
{
   while (1)
   {
   }
}
